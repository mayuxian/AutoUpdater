// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: IUpdateService.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Updater.GRPCService.Protocol {
  public static partial class IUpdateService
  {
    static readonly string __ServiceName = "Updater.gRPCService.Protocol.IUpdateService";

    static readonly grpc::Marshaller<global::Updater.GRPCService.Protocol.Request> __Marshaller_Updater_gRPCService_Protocol_Request = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Updater.GRPCService.Protocol.Request.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Updater.GRPCService.Protocol.Response> __Marshaller_Updater_gRPCService_Protocol_Response = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Updater.GRPCService.Protocol.Response.Parser.ParseFrom);

    static readonly grpc::Method<global::Updater.GRPCService.Protocol.Request, global::Updater.GRPCService.Protocol.Response> __Method_GetResponseAsync = new grpc::Method<global::Updater.GRPCService.Protocol.Request, global::Updater.GRPCService.Protocol.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetResponseAsync",
        __Marshaller_Updater_gRPCService_Protocol_Request,
        __Marshaller_Updater_gRPCService_Protocol_Response);

    static readonly grpc::Method<global::Updater.GRPCService.Protocol.Request, global::Updater.GRPCService.Protocol.Response> __Method_GetResponseStreamAsync = new grpc::Method<global::Updater.GRPCService.Protocol.Request, global::Updater.GRPCService.Protocol.Response>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetResponseStreamAsync",
        __Marshaller_Updater_gRPCService_Protocol_Request,
        __Marshaller_Updater_gRPCService_Protocol_Response);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Updater.GRPCService.Protocol.IUpdateServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of IUpdateService</summary>
    [grpc::BindServiceMethod(typeof(IUpdateService), "BindService")]
    public abstract partial class IUpdateServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Updater.GRPCService.Protocol.Response> GetResponseAsync(global::Updater.GRPCService.Protocol.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetResponseStreamAsync(global::Updater.GRPCService.Protocol.Request request, grpc::IServerStreamWriter<global::Updater.GRPCService.Protocol.Response> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for IUpdateService</summary>
    public partial class IUpdateServiceClient : grpc::ClientBase<IUpdateServiceClient>
    {
      /// <summary>Creates a new client for IUpdateService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public IUpdateServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for IUpdateService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public IUpdateServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected IUpdateServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected IUpdateServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Updater.GRPCService.Protocol.Response GetResponseAsync(global::Updater.GRPCService.Protocol.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetResponseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Updater.GRPCService.Protocol.Response GetResponseAsync(global::Updater.GRPCService.Protocol.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetResponseAsync, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Updater.GRPCService.Protocol.Response> GetResponseAsyncAsync(global::Updater.GRPCService.Protocol.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetResponseAsyncAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Updater.GRPCService.Protocol.Response> GetResponseAsyncAsync(global::Updater.GRPCService.Protocol.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetResponseAsync, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Updater.GRPCService.Protocol.Response> GetResponseStreamAsync(global::Updater.GRPCService.Protocol.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetResponseStreamAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Updater.GRPCService.Protocol.Response> GetResponseStreamAsync(global::Updater.GRPCService.Protocol.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetResponseStreamAsync, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override IUpdateServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new IUpdateServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(IUpdateServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetResponseAsync, serviceImpl.GetResponseAsync)
          .AddMethod(__Method_GetResponseStreamAsync, serviceImpl.GetResponseStreamAsync).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, IUpdateServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetResponseAsync, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Updater.GRPCService.Protocol.Request, global::Updater.GRPCService.Protocol.Response>(serviceImpl.GetResponseAsync));
      serviceBinder.AddMethod(__Method_GetResponseStreamAsync, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Updater.GRPCService.Protocol.Request, global::Updater.GRPCService.Protocol.Response>(serviceImpl.GetResponseStreamAsync));
    }

  }
}
#endregion
